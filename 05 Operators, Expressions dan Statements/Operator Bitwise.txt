TABEL KONVERSI BINER :
------------------------------------------------
7   | 6   | 5   | 4   |  3   | 2   |  1   | 0   |
 2  |  2  |  2  |   2 |   2  |  2  |   2  |  2  |
-------------------------------------------------
128 |  64 |  32 |  16 |  8   |  4  |   2  |  1  |
------------------------------------------------

Cara Menyelesaikan Soal Operator Bitwise, Hal yang paling penting adalah Memperhatikan tabel Konversi dan Tabel Logika (AND, OR, XOR, NOT, Left Shift, Right Shift)


=================================================
1. AND ( & )
   Gerbang AND memerlukan 2 input dan menghasilkan 1 Output.
   X dan Y ==> INPUT
   Z       ==> OUTPUT
   Untuk Mendapatkan Output "TRUE(1)" maka Kedua Input harus bernilai "TRUE(1)" jika salah
   satu bernilai "FALSE(0)" maka hasil outputnya akan Bernilai "FALSE". Lihat Tabel dibawah. 
   
   Tabel AND
   X  |  Y  | AND (Z = X & Y) |
   0  |  0  |    0  False     |
   0  |  1  |    0  False     |
   1  |  0  |    0  False     |
   1  |  1  |    1  True      |

Contoh Soal :

   12 bit ===> 0  0  0  0  1  1  0  0
   10 bit ===> 0  0  0  0  1  0  1  0
   ------------------------------------- AND                      
               0  0  0  0  1  0  0  0   ===> 8
==================================================

            
==================================================            
2. OR ( | )
   Gerbang OR memerlukan 2 input dan menghasilkan 1 Output.
   X dan Y ==> INPUT
   Z       ==> OUTPUT
   Jika Salah Satu Input bernilai "TRUE" maka Hasil Outputnya bernilai "TRUE". Lihat Tabel
   dibawah 

   Tabel OR
   X  |  Y  | OR (X | Y)  |
   0  |  0  |  0  False   |
   0  |  1  |  1  True    |
   1  |  0  |  1  True    |
   1  |  1  |  1  True    |
   
   12 bit ===> 0  0  0  0  1  1  1  0
   10 bit ===> 0  0  0  0  1  0  1  0
   ------------------------------------- OR                      
               0  0  0  0  1  1  1  0   ===> 14
====================================================

            
====================================================           
3. XOR ( ^ )
   XOR atau X-OR adalah singkatan dari Exclusive OR yang terdiri dari 2 Masukan (Input) dan
   Keluaran (Output) Logika. Gerbang X-OR akan menghasilkan Keluaran (Output) Logika 1 jika
   semua Masukan-masukannya (Input) mempunyai nilai Logika yang berbeda.   
   Jika nilai Logika Inputnya sama, maka akan memberikan hasil Keluaran Logika 0.
   
   Tabel XOR
   X  |  Y  | OR (X ^ Y)  |
   0  |  0  |  0  False   |
   0  |  1  |  1  True    |
   1  |  0  |  1  True    |
   1  |  1  |  0  False   |

                 
   12 bit ===> 0  0  0  0  1  1  0  0
   10 bit ===> 0  0  0  0  1  0  1  0
   ------------------------------------- XOR                      
               0  0  0  0  0  1  1  0   ===> 6      
=====================================================            
            
            
=====================================================            
4. NOT ( ~ )
   Gerbang NOT hanya memerlukan 1 Input dan menghasilkan 1 Output.
   Gerbang NOT disebut juga dengan Inverter (Pembalik) karena menghasilkan Keluaran
   (Output) yang berlawanan (kebalikan) dengan Masukan atau Inputnya. 
   Berarti jika kita ingin mendapatkan Keluaran (Output) dengan nilai Logika 0 maka Input
   atau Masukannya harus bernilai Logika 1. 
   
   Tabel NOT
   X  |  NOT (~X)   | 
   0  |  1  False   |
   1  |  0  True    |
            
   12 bit ===> 0  0  0  0  1  1  0  0 
   ----------------------------------- NOT                      
               0  0  0  0  1  1  0  1   ===> -13    
======================================================            
            
        
======================================================          
5. LEFT SHIFT ( << )
   menggeser nomor ke kiri berdasarkan jumlah bit yang ditentukan. Angka nol akan ditambahkan
   ke bit yang paling tidak signifikan.
   Contoh Soal :
   12 << 1   ==> 24
   12 << 2   ==> 48
   
   Solusi :
   
   12 bit ===> 0  0  0  0  1  1  0  0
   ------------------------------------- LEFT SHIFT
               
               
                           <------------ Geser 1 Kekiri dari bit 12
               0  0  0  1  1  0  0  0   ===> 24       
                           
                           <------------ Geser 2 Kekiri dari bit 12
               0  0  0  1  1  0  0  0   ===> 48
===================================================================== 
        
         
=====================================================================         
6. RIGHT SHIFT ( >> )
   menggeser nomor ke kanan berdasarkan jumlah bit yang ditentukan. Angka nol akan
   ditambahkan ke bit yang paling tidak signifikan.
   
   Contoh :
   12 >> 1   ==> 6
   12 >> 2   ==> 3
   
   Solusi :   
   12 bit ===> 0  0  0  0  1  1  0  0
   ------------------------------------- RIGHT SHIFT                        
               0  0  0  0  0  0  0  0        
                    
                    
               ------------> Geser 1 Kekanan dari bit 12
               0  0  0  0  0  1  1  0   ===> 6       
                           
               ------------> Geser 2 Kekanan dari bit 12
               0  0  0  0  0  0  1  1   ===> 3
======================================================================


======================================================================
7. NAND (Not AND)
   NAND merupakan kebalikan dari AND. Jika Pada AND kita mencari nilai "TRUE" maka pada NAND
   kita mencari nilai "FALSE" dengan konsep logika yang sama. 
   AND  ==> Kedua Input harus bernilai TRUE agar mendapatkan Output TRUE
   NAND ==> Kedua Input harus bernilai TRUE agar mendapatkan Output FALSE 
   
   Tabel NAND(Not AND)
   X  |  Y  | NAND (X !& Y) |
   0  |  0  |    0  False   |
   0  |  1  |    0  False   |
   1  |  0  |    0  False   |
   1  |  1  |    1  True    |
======================================================================= 
  

=======================================================================   
8. NOR(Not OR)
   NOR juga merupakan kebalikan dari OR. 2 input ---> 1 Output
    
   OR  ==> Jika salah satu bernilai TRUE maka Outputnya TRUE.
   NOR ==> Jika salah satu bernilai TRUE maka Outputnya FALSE
   
   Tabel NAND(Not AND)
   X  |  Y  | NAND (X !OR Y) |
   0  |  0  |    0  False    |
   0  |  1  |    0  False    |
   1  |  0  |    0  False    |
   1  |  1  |    1  True     |
=======================================================================
